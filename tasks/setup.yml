---
- name: Get configured data-dir
  become: true
  ansible.builtin.shell:
    cmd: /usr/sbin/mysqld --verbose --help | grep datadir | tail -1
  register: mariadb_stored_datadir

- name: Save datadir as var
  become: true
  ansible.builtin.set_fact:
    mariadb_stored_datadir: "{{ mariadb_stored_datadir.stdout | regex_replace('^datadir\\s*(\\/.*)\\/*\\s*$', '\\1') | regex_replace('^(.*\\/[^\\/]+)\\/*$','\\1') }}"
    mariadb_datadir: "{{ mariadb_datadir | regex_replace('^(.*\\/[^\\/]+)\\/*$','\\1') }}"

- name: Move datadir if needed
  when: mariadb_stored_datadir != mariadb_datadir
  block:
    - name: Stop MariaDB server
      become: true
      ansible.builtin.service:
        service: mariadb
        state: stopped

    - name: "Check if folder {{ mariadb_datadir }} exists"
      become: true
      ansible.builtin.stat:
        path: "{{ mariadb_datadir }}"
      register: folder

    - name: Check if folder is empty
      when: folder.stat.exists
      become: true
      ansible.builtin.find:
        paths: "{{ mariadb_datadir }}"
        file_type: any
        hidden: true
      register: files_found

    - name: Copy datadir
      when: not folder.stat.exists or (folder.stat.exists and files_found.matched == 0) 
      become: true
      ansible.builtin.copy:
        src: "{{ mariadb_stored_datadir }}/"
        dest: "{{ mariadb_datadir }}/"
        owner: "{{ mariadb_user }}"
        group: "{{ mariadb_user }}"
        mode: preserve
        remote_src: true

    - name: Remove old datadir
      become: true
      ansible.builtin.file:
        path: "{{ mariadb_stored_datadir }}"
        state: absent

- name: Copy MariaDB configuration
  become: true
  ansible.builtin.template:
    src: mariadb.cnf.j2
    dest: "{{ mariadb_config_path }}/{{ mariadb_config_file }}"
    mode: "{{ mariadb_config_file_mode }}"
    force: true
  notify: restart mariadb

- name: Be sure system databases are installed correctly
  become: true
  ansible.builtin.command:
    cmd: |
      mariadb-install-db
        --auth-root-authentication-method=socket
        --skip-name-resolve
        --skip-test-db
        --user={{ mariadb_user }}
    creates: "{{ mariadb_datadir }}/mysql/user.frm"
  notify: restart mariadb

- name: Ensure MariaDB is started and enabled on boot
  become: true
  ansible.builtin.service:
    name: mariadb
    state: started
    enabled: "{{ mariadb_enabled_on_startup }}"
